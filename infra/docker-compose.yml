version: '3.8'

services:
  backend:
    build:
      context: ../backend       # Path from infra to backend
      dockerfile: Dockerfile    # Inside backend folder
    container_name: ecs-backend
    ports:
      - "8000:8000"
    volumes:
      - ../backend/app:/app/app
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - db
    env_file:
      - ../backend/.env
    networks:
      - ecs-network

  celery:
    build:
      context: ../backend       # Path from infra to backend
      dockerfile: Dockerfile    # Inside backend folder
    container_name: ecs_celery
    command: celery -A celery_app.celery_app worker --loglevel=info
    volumes:
      - ../backend:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_started
      redis:
        condition: service_started
    environment:
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    env_file:
      - ../backend/.env
    networks:
      - ecs-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: ecs_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - ecs-network

  redis:
    image: redis:7
    container_name: ecs_redis
    ports:
      - "6379:6379"
    networks:
      - ecs-network

  db:
    image: postgres:15
    container_name: ecs-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ecs_user
      POSTGRES_PASSWORD: ecs_pass
      POSTGRES_DB: ecs_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecs-network

networks:
  ecs-network:

volumes:
  postgres_data: